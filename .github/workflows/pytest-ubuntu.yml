# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: 
      - master
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'test_v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ master ]

jobs:
  tests:
    name: Run tests/coverage
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: ["macos-latest", "ubuntu-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1 pinned commit
        continue-on-error: true
        with:
          miniforge-version: latest
          use-mamba: true
          auto-update-conda: true
          channels: conda-forge, defaults
          python-version: ${{ matrix.python-version }}
      - name: Output conda info
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
          printenv | sort
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement build-requirements.txt
      - name: Test All backend
        run: hatch test --all --cover -- -vx
      - name: Rename file 
        run: mv coverage/.coverage coverage/.coverage.${{ matrix.python-version }}.${{ matrix.os }}
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
          path: coverage/.coverage.${{ matrix.python-version }}.${{ matrix.os }}
          include-hidden-files: true
          if-no-files-found: ignore
  coverage:
    name: Combine & check coverage
    if: always()
    needs: tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          # Use latest Python, so it understands all syntax.
          python-version: "3.12"
      - name: Install a specific version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.4.4"
      - uses: actions/download-artifact@v4
        with:
          pattern: .coverage.*
      - name: Install coverage.py
        run: uv tool install 'coverage[toml]'
      - name: Combine coverage
        run: |
          coverage combine .coverage.*

          # Report and write to summary.
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

          coverage xml -o desolver-coverage.xml
      - name: Upload XML report if check failed
        uses: actions/upload-artifact@v4
        with:
          name: xml-report
          path: desolver-coverage.xml
      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1
        with:
          fail_ci_if_error: true # optional (default = false)
          flags: pr-tests-${{ github.head_ref }} # optional
          name: desolver-combined-reports # optional
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)
  publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI and TestPyPI
    needs: coverage
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.12
        uses: actions/setup-python@v1
        with:
          python-version: "3.12"
      - name: Install pypa/build
        run: python -m pip install --requirement build-requirements.txt
      - name: Build a binary wheel and a source tarball
        run: hatch build
      - name: Publish distribution üì¶ to Test PyPI
        if: startsWith(github.ref, 'refs/tags/test_v')
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Publish distribution üì¶ to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      