[build-system]
requires = ["hatch>=1.14.0", "hatchling>=1.27.0", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "desolver"
version = "5.0.0"
dependencies = [
    'numpy>=2',
    'tqdm>=4.47.0',
    'scipy>=1.15.0',
    'autoray>=0.7.0',
    'einops>=0.8.0'
]
requires-python = ">=3.10"
authors = [
  {name = "Ekin Ozturk'", email = "ekin.ozturk@alumni.utoronto.ca"},
]
maintainers = [
  {name = "Ekin Ozturk'", email = "ekin.ozturk@alumni.utoronto.ca"},
]
description = "Differential Equation System Solver"
dynamic = ["readme"]
license = "MIT"
license-files = ["LICEN[CS]E*"]
keywords = ['ode solver', 'differential equation', 'differential system', 'ode system', 'non-linear ode']
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Education',
    'Intended Audience :: End Users/Desktop',
    'Topic :: Scientific/Engineering :: Mathematics',

    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: MIT License',

    # Specify the Python versions you support here. In particular, ensure
    # that you indicate whether you support Python 2, Python 3 or both.
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12'
]

[project.urls]
Homepage = "https://github.com/Microno95/desolver.git"
Documentation = "https://desolver.readthedocs.io/"
Repository = "https://github.com/Microno95/desolver.git"
Issues = "https://github.com/Microno95/desolver/issues"
Changelog = "https://github.com/me/spam/blob/master/CHANGELOG.md"

[project.optional-dependencies]
torch = [
    "torch>=2.5.0",
]
build = [
    "hatch"
]
test = [
    "coverage",
    "pytest>=5.4.3",
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cu126", marker = "sys_platform == 'win32'" },
  { index = "pytorch-cu126", marker = "sys_platform == 'linux'" },
  { index = "pytorch-cpu", marker = "sys_platform == 'darwin'" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu126"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

[tool.hatch.envs.dev]
installer = "uv"
extra-dependencies = [
  "jupyter",
  "matplotlib",
  "scipy",
  "torch>=2.5.0",
  "networkx",
  "tqdm",
  "ipywidgets",
  "twine"
]

[tool.hatch.envs.hatch-test]
installer = "uv"
parallel = true
default-args = ["desolver"]
features = [
  "test"
]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[[tool.hatch.envs.hatch-test.matrix]]
test-mode=["base", "torch"]

[tool.hatch.envs.hatch-test.overrides]
matrix.test-mode.env-vars = [
  { key="DES_BACKEND", value = "numpy", if = ["base"] },
  { key="DES_BACKEND", value = "torch", if = ["torch"] },
]
matrix.test-mode.features = [
    "test",
  { value = "torch", if = ["torch"] },
]

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/docs",
  "/.coveragerc",
  "/.readthedocs.yml",
  "build-requirements.txt"
]

[tool.hatch.build.targets.wheel]
packages = ["desolver/"]

[tool.coverage.run]
parallel = true
branch = true
relative_files = true
source = ["desolver"]
omit = [
  "*/tests/*"
]
data_file = "coverage/.coverage"

[tool.coverage.report]
format = "text"
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.lcov]
output = "coverage.lcov"
line_checksums = true

[tool.coverage.html]
directory = "coverage/htmlcov/"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path="README.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path="AVAILABLE_METHODS.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path="REFERENCES.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path="CHANGELOG.rst"